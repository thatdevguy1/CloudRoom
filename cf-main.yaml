AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for a cloud storage app using S3, Cognito, API Gateway, Lambda, and DynamoDB.

Resources:
  # S3 Bucket for file storage
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-s3-bucket"

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      AutoVerifiedAttributes:
        - email

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "${AWS::StackName}-user-pool-client"
      GenerateSecret: false

  # Cognito Identity Pool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-identity-pool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"

  # Cognito Identity Pool Role Attachment
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  # IAM Role for authenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"

  # DynamoDB Table for User Data
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-user-table"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: SubscriptionType
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: SubscriptionType
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: SubscriptionIndex
          KeySchema:
            - AttributeName: SubscriptionType
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Function for saving user data to DynamoDB on signup
  SaveUserDataFunction:
    Type: AWS::Lambda::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${AWS::StackName}-save-user-data"
      Handler: main
      Runtime: provided.al2
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: cloudroom-lambda-functions
        S3Key: saveUserData.zip

  # Lambda Function for file uploads
  FileUploadFunction:
    Type: AWS::Lambda::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub "${AWS::StackName}-file-upload"
      Handler: main
      Runtime: provided.al2
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: cloudroom-lambda-functions
        S3Key: uploadFile.zip

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}"
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FileUploadFunction.Arn}/invocations"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FileUploadFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/upload"

Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Description: Name of the S3 bucket.

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Description: ID of the Cognito User Pool.

  ApiEndpoint:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload"
    Description: Endpoint for the API Gateway.

  DynamoDBTableName:
    Value: !Ref UserTable
    Description: Name of the DynamoDB table for user data.
